import * as t from '@babel/types';
export interface Token {
    type: TokenType;
    value: string;
    start: number;
    end: number;
    loc: t.SourceLocation;
}
export interface TokenType {
    label: string;
    keyword?: string;
    beforeExpr: boolean;
    startsExpr: boolean;
    rightAssociative: boolean;
    isLoop: boolean;
    isAssign: boolean;
    prefix: boolean;
    postfix: boolean;
    binop: number | null;
    updateContext: Function | null;
}
export interface Insertion {
    index: number;
    content: string;
}
export interface Removal {
    start: number;
    end: number;
}
export interface Changes {
    insertions: Array<Insertion>;
    removals: Array<Removal>;
}
export default function process(source: string, ast: t.File): Changes;
