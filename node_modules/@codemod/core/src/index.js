"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@babel/core");
const RecastPlugin_1 = require("./RecastPlugin");
const PrettierPrinterPlugin_1 = require("./PrettierPrinterPlugin");
const BabelPrinterPlugin_1 = require("./BabelPrinterPlugin");
const AllSyntaxPlugin_1 = require("./AllSyntaxPlugin");
var Printer;
(function (Printer) {
    Printer["Recast"] = "recast";
    Printer["Prettier"] = "prettier";
    Printer["Babel"] = "babel";
})(Printer = exports.Printer || (exports.Printer = {}));
/**
 * Transform `code` using `@babel/core` with a custom parser & printer, which
 * defaults to `recast`. Additionally, `@codemod/parser` is used to enable as
 * many parser plugins as possible.
 */
function transform(code, _a = {}) {
    var { printer } = _a, options = __rest(_a, ["printer"]);
    return core_1.transformSync(code, Object.assign(Object.assign({}, options), { plugins: [
            ...(options.plugins || []),
            AllSyntaxPlugin_1.default(options.sourceType || 'unambiguous'),
            loadPrinterPlugin(printer),
        ] }));
}
exports.transform = transform;
function loadPrinterPlugin(printer) {
    switch (printer) {
        case undefined:
        case Printer.Recast:
            return RecastPlugin_1.default;
        case Printer.Prettier:
            return PrettierPrinterPlugin_1.default;
        case Printer.Babel:
            return BabelPrinterPlugin_1.default;
        default:
            throw new Error(`unknown printer: ${printer}`);
    }
}
//# sourceMappingURL=index.js.map