import { NodePath, Node } from '@babel/traverse';
import * as t from '@babel/types';
declare type RecastComment = t.Comment & {
    leading?: boolean;
    trailing?: boolean;
};
export declare function replaceWithAndPreserveComments(path: NodePath, node: Node): void;
export declare function replaceWithAndPreserveComments(path: NodePath, nodes: Array<Node>): void;
export declare function addTrailingComment(comment: t.Comment, to: Node): void;
export declare function addLeadingComment(comment: t.Comment, to: Node): void;
export declare type CommentPredicate = (comment: RecastComment) => boolean;
export declare function addLeadingOrTrailingComment(comment: RecastComment, to: Node): void;
export declare function copyComments(from: Node, to: Node, shouldCopy?: CommentPredicate, addComment?: typeof addLeadingOrTrailingComment): void;
export declare function copyLeadingComments(from: Node, to: Node, addComment?: typeof addLeadingComment): void;
export declare function copyTrailingComments(from: Node, to: Node, addComment?: typeof addTrailingComment): void;
export {};
