"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const t = __importStar(require("@babel/types"));
function hasMemberAccess(assignmentPath) {
    if (t.isMemberExpression(assignmentPath.node)) {
        return true;
    }
    let found = false;
    assignmentPath.traverse({
        MemberExpression(path) {
            found = true;
            path.skip();
        }
    });
    return found;
}
function hasIdentifier(calleePath, names) {
    if (t.isIdentifier(calleePath.node) &&
        names.indexOf(calleePath.node.name) !== -1) {
        return true;
    }
    let found = false;
    calleePath.traverse({
        Identifier(path) {
            if (names.indexOf(path.node.name) !== -1) {
                found = true;
                path.skip();
            }
        }
    });
    return found;
}
/**
 * Return the position of the first line of code that might affect the global
 * object. Any require calls after this point cannot safely be turned into
 * import statements, since import statements are hoisted.
 */
function getFirstUnsafeLocation(programPath, allowedFunctionIdentifiers) {
    let resultLoc = programPath.node.end;
    programPath.traverse({
        AssignmentExpression(path) {
            if (hasMemberAccess(path.get('left'))) {
                resultLoc = Math.min(resultLoc, path.node.start);
                path.skip();
            }
        },
        UpdateExpression(path) {
            if (hasMemberAccess(path.get('argument'))) {
                resultLoc = Math.min(resultLoc, path.node.start);
                path.skip();
            }
        },
        CallExpression(path) {
            const callee = path.get('callee');
            if (callee.isExpression() &&
                !hasIdentifier(callee, allowedFunctionIdentifiers)) {
                resultLoc = Math.min(resultLoc, path.node.start);
                path.skip();
            }
        },
        ReturnStatement(path) {
            resultLoc = Math.min(resultLoc, path.node.start);
            path.skip();
        },
        ThrowStatement(path) {
            resultLoc = Math.min(resultLoc, path.node.start);
            path.skip();
        }
    });
    return resultLoc;
}
exports.default = getFirstUnsafeLocation;
//# sourceMappingURL=getFirstUnsafeLocation.js.map