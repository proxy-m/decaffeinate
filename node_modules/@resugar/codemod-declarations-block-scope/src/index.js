"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mostRestrictiveKindForDeclaration_1 = __importDefault(require("./mostRestrictiveKindForDeclaration"));
function default_1({ types: t }) {
    return {
        name: '@resugar/codemod-declarations-block-scope',
        visitor: {
            VariableDeclaration(path, state) {
                const { node } = path;
                const options = (state && state.opts) || {};
                const onWarn = options.onWarn || (() => { });
                if (node.kind !== 'var') {
                    return;
                }
                let kind = mostRestrictiveKindForDeclaration_1.default(path);
                if (kind !== 'var') {
                    if (kind === 'const' && !constAllowed(path, options)) {
                        kind = 'let';
                    }
                    node.kind = kind;
                }
                else {
                    onWarn(node, 'unsupported-declaration', `'var' declaration cannot be converted to block scope`);
                }
            }
        }
    };
}
exports.default = default_1;
/**
 * Delegates to user-supplied options to determine whether `let` is allowed.
 */
function constAllowed(path, options) {
    let { disableConst } = options;
    if (typeof disableConst === 'function') {
        return !disableConst(path);
    }
    else {
        return !disableConst;
    }
}
//# sourceMappingURL=index.js.map